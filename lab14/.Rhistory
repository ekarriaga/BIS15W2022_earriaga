#refernece gives additional infor about where we got this
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
install.packages("shinydashboard")
library(tidyverse)
library(janitor)
library("palmerpenguins")
options(scipen=999) #cancels the use of scientific notation for the session
penguins <- penguins
heartrate <- readr::read_csv("data/heartrate.csv")
heartrate <- heartrate %>%
add_column(no_drug = c(71, 79, 66, 62, 73, 81) )
homerange <- read_csv("data/modified_Tamburelloetal_HomeRangeDatabase.csv")
library(tidyverse)
install.packages("ggVennDiagram")
library(ggVennDiagram)
library(tidyverse)
install.packages("ggVennDiagram")
library(ggVennDiagram)
library(tidyverse)
install.packages("ggVennDiagram")
library(RColorBrewer)
install.packages("ggworldcloud")
library(tidyverse)
install.packages("ggVennDiagram")
library(ggVenDiagram)
library(tidyverse)
install.packages("ggVennDiagram")
library(ggVennDiagram)
library(tidyverse)
install.packages("ggVennDiagram")
library(RColorBrewer)
install.packages("ggworldcloud")
library(ggworldcloud)
library(tidyverse)
install.packages("ggVennDiagram")
library(RColorBrewer)
install.packages("ggworldcloud")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
install.packages("ggVennDiagram")
library(RColorBrewer)
install.packages("ggworldcloud")
head(penguins)
penguins %>%
ggplot(aes(x = island, y = body_mass_g, fill = island)) +
geom_boxplot(na.rm = TRUE)+
coord_flip()
penguins %>%
ggplot(aes(x = island, y = body_mass_g, fill = island)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
penguins %>%
filter(sex == "female") %>%
ggplot(aes(x = island, y = body_mass_g, fill = island)) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
geom_violin(alpha = .5, na.rm = TRUE) +
coord_flip()
penguins %>%
ggplot(aes(x = island, y = body_mass_g, fill = species)) +
geom_violin(alpha = .3, na.rm = TRUE) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
coord_flip()
homerange
head(homerange)
homerange%>%
ggplot(aes(x = taxon, y= log10.mass, fill= taxon))+
geom_boxplot(color= "grey", alpha = 0.3)+
geom_violin(alpha= .5, na.rm= TRUE)
homerange%>%
ggplot(aes(x = taxon, y= log10.mass, fill= taxon))+
geom_boxplot(color= "grey", alpha = 0.3)+
geom_violin(alpha= .5, na.rm= TRUE)+
coord_flip()
homerange%>%
ggplot(aes(x = taxon, y= log10.mass, fill= taxon))+
geom_boxplot(color= "grey", alpha = 0.3, na.rm = TRUE)+
geom_violin(alpha= .5, na.rm= TRUE)+
coord_flip()
heartrate
heartrate_long <- heartrate %>%
pivot_longer(-patient, #patient does not pivot
names_to = "drug",
values_to = "heartrate"
)
heartrate_long
heartrate_long %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile() + # new geom file
scale_fill_gradient(low="yellow", high="red")
heartrate_long %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile() + # new geom file
scale_fill_gradient(low="green", high="red")
heartrate_long %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile() + # new geom file
scale_fill_gradient(low="yellow", high="red")
heartrate_diff <- heartrate%>%
mutate(across(c(a,b,c,d), ~ . - no_drug)) %>% #mutating the wide plot and subtract the heart rate without drug to see difference
select(-no_drug) %>%
pivot_longer(-patient, #patient does not pivot
names_to = "drug",
values_to = "heartrate"
)
heartrate_diff
heartrate_diff %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
# scale_fill_graient2 lets you set a color direction for zero (mid), positive (high), and negative (low)
heartrate_diff %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile()+
scale_fill_gradient2(low="purple", mid = "white", high="blue")
# scale_fill_graient2 lets you set a color direction for zero (mid), positive (high), and negative (low)
heartrate_diff %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile()+
scale_fill_gradient2(low="blue", mid = "white", high="red")
# scale_fill_graient2 lets you set a color direction for zero (mid), positive (high), and negative (low)
head(penguins)
penguin_mass_heatmap<-
penguins%>%
ggplot(aes(species, sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient2(low = "blue", mid= "green", high= "red")
penguin_mass_heatmap<-
penguins%>%
ggplot(aes(species, sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient2(low = "blue", mid= "green", high= "red")
penguin_mass_heatmap
penguin_mass_heatmap<-
penguins%>%
ggplot(aes(species, sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient(low = "blue", high= "red")
penguin_mass_heatmap
penguin_mass_heatmap<-
penguins%>%
filter(sex== "male", sex== "female")
ggplot(aes(x= species, y= sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient(low = "blue", high= "red")
penguin_mass_heatmap<-
penguins%>%
filter(sex== "M", sex== "F")
ggplot(aes(x= species, y= sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient(low = "blue", high= "red")
penguin_mass_heatmap<-
penguins%>%
filter(sex== "M"&"F")
penguin_mass_heatmap<-
penguins%>%
ggplot(aes(x= species, y= sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient(low = "blue", high= "red")
penguin_mass_heatmap
penguin_mass_heatmap<-
penguins%>%
filter(sex != "NA")%>%
ggplot(aes(x= species, y= sex, fill= body_mass_g))+
geom_tile()+
scale_fill_gradient(low = "blue", high= "red")
penguin_mass_heatmap
?scale_fill_gradient
flying_vec <- homerange %>%
filter(locomotion == "flying")%>%
pull(common.name)
swimming_vec <- homerange %>%
filter(locomotion == "swimming")%>%
pull(common.name)
fly_or_swim_list <- list(flying_vec, swimming_vec)
ggVennDiagram(fly_or_swim_list, category.names = c("Fly", "Swim"))
library(ggVennDiagram)
fly_or_swim_list <- list(flying_vec, swimming_vec)
ggVennDiagram(fly_or_swim_list, category.names = c("Fly", "Swim"))
library(tidyverse)
install.packages("ggVennDiagram")
library(RColorBrewer)
install.packages("ggwordcloud")
library(tidyverse)
library(ggVennDiagram)
library(RColorBrewer)
install.packages("ggwordcloud")
flying_vec
bird_vec <- homerange %>%
filter(taxon == "birds")%>%
pull(common.name)
fly_or_bird_list <- list(flying_vec, bird_vec)
ggVennDiagram(fly_or_bird_list, category.names = c("Fly", "Bird"))
homerange%>%
filter(taxon == "birds")%>%
filter(locomotion != "flying")%>%
select(common.name)
homerange%>%
filter(taxon != "birds")%>%
filter(locomotion != "flying")%>%
select(common.name)
homerange%>%
filter(taxon != "birds")%>%
filter(locomotion == "flying")%>%
select(common.name)
herbivore_vec <- homerange %>%
filter(trophic.guild == "herbivore")%>%
pull(common.name)
fly_bird_herbi_list <- list(flying_vec, bird_vec, herbivore_vec)
ggVennDiagram(fly_bird_herbi_list, category.names = c("Fly", "Bird", "Herbivore"))
# you can toggle edge size
venn_plot <- ggVennDiagram(fly_or_bird_list, category.names = c("Fly", "Bird"), edge_size = 1.5)
venn_plot +
scale_fill_distiller(palette = "Greys")+ #distiller is for discrete data
labs(title = "Do all birds fly? Do only birds fly?",
caption = ("you can add a caption here, e.g.: Studys show not all birds fly, and not only birds fly")
)
# you can toggle edge size
venn_plot <- ggVennDiagram(fly_or_bird_list, category.names = c("Fly", "Bird"), edge_size = 1.5)
venn_plot +
scale_fill_distiller(palette = "Greys")+ #distiller is for discrete data
labs(title = "Do all birds fly? Do only birds fly?",
caption = ("you can add a caption here, e.g.: Studys show not all birds fly, and not only birds fly")
)
# you can toggle edge size and label (Fly, Bird) colors here
ggVennDiagram(fly_or_bird_list,
set_color = c("black", "blue"),             # sets label colors
category.names = c("Fly", "Bird"),          # sets category label names
label_color = "firebrick",                  # sets overlap-quantity label color
label_size = 4                              # sets overlap-label size
)+
scale_color_brewer(palette = "Set3")+                   # sets palette for circle colors
scale_fill_distiller(palette = "Greys")+                # distiller is for discrete data
labs(title = "Do all birds fly? Do only birds fly?",
caption = ("you can add a caption here, e.g.: Studys show not all birds fly, and not only birds fly") )
#Set Up the vectors:
#you can also recycle the one we made earlier
swimming_vec<- homerange %>%
filter(locomotion=="swimming")%>%
pull(common.name)
carni_vec<- homerange %>%
filter(trophic.guild=="carnivore")%>%
pull(common.name)
aqua_vec <- homerange %>%
filter(realm == "aquatic")%>%
pull(common.name)
ecto_vec<- homerange %>%
filter(thermoregulation =="ectotherm")%>%
pull(common.name)
# Make the list of vectors:
four_factors_venn <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(four_factors_venn, category.names = c("Swimming", "Carnivore", "Aquatic", "Ectotherm"))
names(homerange)
homerange%>%
filter(locomotion =="swimming")%>%
filter(thermoregulation== "ectotherm")%>%
filter(trophic.guild != "carnivore")
homerange%>%
filter(locomotion =="swimming")%>%
filter(thermoregulation== "ectotherm")%>%
filter(trophic.guild != "carnivore")%>%
select(common.name)
hr_taxon_count <- homerange %>%
count(taxon)
hr_taxon_count
hr_taxon_count %>%
ggplot(aes(
label = taxon,
size = n,
color = taxon
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
library(ggwordcloud)
hr_taxon_count %>%
ggplot(aes(
label = taxon,
size = n,
color = taxon
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
library(ggwordcloud)
hr_taxon_count %>%
ggplot(aes(
label = taxon,
size = n,
color = taxon
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 8) +
theme_minimal()
library(ggwordcloud)
hr_taxon_count %>%
ggplot(aes(
label = taxon,
size = n,
color = taxon
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 14) +
theme_minimal()
hr_reptiles_count <-
homerange%>%
filter(class== "reptilia")%>%
count(family)
hr_reptiles_count %>%
ggplot(aes(
label = class,
size = n,
color = class
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 14) +
theme_minimal()
hr_reptiles_count %>%
ggplot(aes(
label = family,
size = n,
color = family
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 14) +
theme_minimal()
library(tidyverse)
library(janitor)
options(scipen=999) #cancels the use of scientific notation for the session
superheros <- readr::read_csv("data/heroes_information.csv")
library(tidyverse)
library(janitor)
library("palmerpenguins")
#install.packages("ggVennDiagram")
library(ggVennDiagram)
library(RColorBrewer)
#install.packages("ggworldcloud")
library(ggwordcloud)
options(scipen=999) #cancels the use of scientific notation for the session
library(tidyverse)
library(janitor)
library("palmerpenguins")
#install.packages("ggVennDiagram")
library(ggVennDiagram)
library(RColorBrewer)
#install.packages("ggworldcloud")
library(ggwordcloud)
options(scipen=999) #cancels the use of scientific notation for the session
library(tidyverse)
library(janitor)
library("palmerpenguins")
#install.packages("ggVennDiagram")
library(ggVennDiagram)
library(RColorBrewer)
#install.packages("ggworldcloud")
library(ggwordcloud)
options(scipen=999) #cancels the use of scientific notation for the session
superhero_info <- readr::read_csv("data/heroes_information.csv", na = c("", "-99", "-"))
superhero_powers <- readr::read_csv("data/super_hero_powers.csv", na = c("", "-99", "-"))
beachbugs_long <- readr::read_csv("data/beachbugs_long.csv")
superhero_info <- janitor::clean_names(superhero_info)
glimpse(superhero_info)
summarize(superhero_info)
summary(superhero_info)
head(superhero_info)
name(superhero_info)
names(superhero_info)
superhero_info%>%
ggplot(aes(x = alignment, y= weight, fill= alignment))+
geom_boxplot()
superhero_info%>%
filter(alignment != "NA")
ggplot(aes(x = alignment, y= weight, fill= alignment))+
geom_boxplot()
superhero_info%>%
filter(alignment != "NA")+
ggplot(aes(x = alignment, y= weight, fill= alignment))+
geom_boxplot()
superhero_info%>%
filter(alignment != "NA")+
ggplot(aes(x = alignment, y= weight, fill= alignment))+
geom_boxplot()
superhero_info%>%
ggplot(aes(x = alignment, y= weight, fill= alignment))+
geom_boxplot()
superhero_info%>%
ggplot(aes(x = alignment, y= weight, fill= alignment))+
geom_boxplot(na.rm = TRUE)
superhero_info%>%
ggplot(aes(x = alignment, y= weight, fill= alignment))+
geom_violin(na.rm = TRUE)
superhero_info%>%
filter(alignment== "NA")+
ggplot(aes(x = alignment, y= weight, fill= alignment))+
geom_boxplot(na.rm = TRUE)
superhero_info%>%
ggplot(aes(x = alignment, y= weight, fill= alignment))+
geom_boxplot(na.rm = TRUE)
superhero_info%>%
ggplot(aes(x = alignment, y= weight, fill= alignment))+
geom_boxplot(color= "gray", alpha= 0.5)
geom_violin(alpha = 0.5)
superhero_info%>%
ggplot(aes(x = alignment, y= weight, fill= alignment))+
geom_boxplot(color= "gray")+
geom_violin(alpha = 0.5)
superhero_info%>%
ggplot(aes(x = alignment, y= weight, fill= alignment))+
geom_boxplot(color= "grey", alpha= 0.5)+
geom_violin(alpha = 0.5)+
coord_flip()
names(superhero_powers)
head(superhero_powers)
superhero_powers_long<-
pivot_longer(-hero_names, #patient does not pivot
names_to = "super_power",
values_to = "ability"
)
superhero_powers_long<-
superhero_powers%>%
pivot_longer(-hero_names, #patient does not pivot
names_to = "super_power",
values_to = "ability"
)
superhero_powers_long
superhero_info%>%
ggplot(aes(x= race, y= weight, fill= race))+
geom_violin()+
coord_flip()
superhero_info%>%
ggplot(aes(x= race, y= weight, fill= race))+
geom_violin()+
scale_x_log10()
superhero_info%>%
ggplot(aes(x= race, y= weight, fill= race))+
geom_violin()+
scale_x_log10()+
coord_flip()
superhero_info%>%
ggplot(aes(x= race, y= weight, fill= race))+
geom_violin()+
coord_flip()
superhero_info%>%
ggplot(aes(x= race, y= weight, fill= race))+
geom_violin()
superhero_info%>%
filter(race == "Human" | race == "Human-Kree"| race== "Human/Altered"| race== "Human/Radiation"| race== "Inhunman" | race == "Metahuman")+
ggplot(aes(x= race, y= weight, fill= race))+
geom_violin()
superhero_info%>%
filter(race == "Human" | race == "Human-Kree"| race== "Human/Altered"| race== "Human/Radiation"| race== "Inhunman" | race == "Metahuman")%>%
ggplot(aes(x= race, y= weight, fill= race))+
geom_violin()
superhero_info%>%
filter(race == "Human" | race == "Human-Kree"| race== "Human/Altered"| race== "Human/Radiation"| race== "Inhunman" | race == "Metahuman")%>%
ggplot(aes(x= race, y= weight, fill= race))+
geom_violin()+
coord_flip()
head(beachbugs_long)
beachbugs_heatmap<-
beachbugs_long%>%
ggplot(aes(x= site, y= year, fill= buglevels))+
geom_tile()+
scale_fill_gradient( low = "yellow", high = "red")+
coord_flip()
beachbugs_heatmap<-
beachbugs_long%>%
ggplot(aes(x= site, y= year, fill= buglevels))+
geom_tile()+
scale_fill_gradient( low = "yellow", high = "red")+
coord_flip()
beachbugs_heatmap
beachbugs_heatmap<-
beachbugs_long%>%
ggplot(aes(x= site, y= year, fill= buglevels))+
geom_tile()+
scale_fill_gradient( low = "light blue", high = "blue")+
coord_flip()
beachbugs_heatmap
#makes a new column of the highest buglevel observed at each site
beachbugs_w_max <- beachbugs_long %>%
group_by(site) %>%
mutate(max_buglevel = max(buglevels, na.rm=T)) %>%
arrange(site)
beachbugs_w_max
#makes a new table where the buglevels are normalized to the max_buglevel
beachbugs_normalized <- beachbugs_w_max %>%
group_by(site) %>%
mutate(norm_buglevel = buglevels/max_buglevel) %>%
arrange(site,year) %>%
select(site, year, norm_buglevel)   # you dont have to select(), but I think its a clearer looking table
beachbugs_normalized
